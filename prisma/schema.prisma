generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SourceType {
  UPLOAD
  URL
}

model music {
  id             Int              @id @default(autoincrement())
  user_id        Int
  title          String           @db.VarChar(255)
  artist         String?           @db.VarChar(255)
  duration       Int?
  url            String
  source_type    SourceType 
  created_at     DateTime        @default(now()) 
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_fr")
  playlist_music playlist_music[]
}

model playlist_music {
  playlist_id Int
  music_id    Int
  music       music     @relation(fields: [music_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "music_Fr")
  playlists   playlists @relation(fields: [playlist_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "playlist_fr")

  @@id([music_id, playlist_id])
}

model playlists {
  id             Int              @id @default(autoincrement())
  user_id        Int
  name           String           @db.VarChar(255)
  created_at     DateTime?        @default(now()) @db.Timetz(6)
  playlist_music playlist_music[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_id_fr")
}

model roles {
  id    Int     @id @default(autoincrement())
  roles String  @db.VarChar(50)
  users users[]
}

model users {
  id         Int         @id @default(autoincrement())
  user_name  String      @db.VarChar(50) @unique
  password   String      @db.VarChar(255)
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  is_active  Boolean?    @default(true)
  role       Int?        @default(1)
  music      music[]
  playlists  playlists[]
  roles      roles?      @relation(fields: [role], references: [id], onUpdate: NoAction, map: "role_fr")
}
